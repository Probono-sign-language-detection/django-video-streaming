version: '3'

# docker-compose up --build
services:

  reverse-proxy-container:
    build:
      context: ./nginx
    ports:
      - 80:80
    restart: always
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf"
    environment:
      TZ: Asia/Seoul
    depends_on:
      - django
      # django:
        # condition: service_healthy
    networks:
      - server

# 컨테이너 빌드
# docker run --name fastapi -d -p 8000:8800(호스트:컨테이너) fastapiapp
# services:

  django:
    build:
      context: .
      dockerfile : Dockerfile
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    stdin_open: true
    tty: true
    volumes:
      - .:/app
    healthcheck:
      test: curl -f http://localhost:8000
      interval: 60s
      timeout: 3s
      retries: 1
    networks:
      - server
      - rmoff_kafka
    depends_on:
      - kafka

  redis-chat:
    image: redis
    restart: always
    container_name: redis-chat
    ports:
      - 6379:6379
    command: redis-server
    healthcheck:
      test: 'redis-cli -h 127.0.0.1 ping'
      interval: 3s
      timeout: 1s
      retries: 5
    depends_on:
      - django


  zoo:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo
    container_name: zoo
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888
    networks:
      - rmoff_kafka


  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      # 도커 네트워크 내부 : internal
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zoo
    networks:
      - rmoff_kafka


  python-kafka-consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: python-kafka-consumer
    # command: >
    #   sh -c "nohup python consumer.py"
    volumes:
      - ./consumer:/app
    networks:
      - rmoff_kafka
    depends_on:
      - django



networks:
  server:
    driver: bridge
  rmoff_kafka:
    driver: bridge